// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "billing-engine/models"
)

// LoanQueryServiceInterface is an autogenerated mock type for the LoanQueryServiceInterface type
type LoanQueryServiceInterface struct {
	mock.Mock
}

// GetDelinquencyStatus provides a mock function with given fields: ctx, loanID
func (_m *LoanQueryServiceInterface) GetDelinquencyStatus(ctx context.Context, loanID string) (*models.DelinquencyResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetDelinquencyStatus")
	}

	var r0 *models.DelinquencyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.DelinquencyResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.DelinquencyResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DelinquencyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanSchedule provides a mock function with given fields: ctx, loanID
func (_m *LoanQueryServiceInterface) GetLoanSchedule(ctx context.Context, loanID string) (*models.LoanScheduleResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanSchedule")
	}

	var r0 *models.LoanScheduleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.LoanScheduleResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.LoanScheduleResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoanScheduleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutstandingBalance provides a mock function with given fields: ctx, loanID
func (_m *LoanQueryServiceInterface) GetOutstandingBalance(ctx context.Context, loanID string) (*models.OutstandingBalanceResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetOutstandingBalance")
	}

	var r0 *models.OutstandingBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OutstandingBalanceResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OutstandingBalanceResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OutstandingBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanQueryServiceInterface creates a new instance of LoanQueryServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanQueryServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanQueryServiceInterface {
	mock := &LoanQueryServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
