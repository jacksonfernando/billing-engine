// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "billing-engine/models"
)

// DisbursementMySQLRepositoryInterface is an autogenerated mock type for the DisbursementMySQLRepositoryInterface type
type DisbursementMySQLRepositoryInterface struct {
	mock.Mock
}

// CreateDisbursement provides a mock function with given fields: ctx, _a1
func (_m *DisbursementMySQLRepositoryInterface) CreateDisbursement(ctx context.Context, _a1 *models.DisbursementDetail) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDisbursement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DisbursementDetail) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoanSummary provides a mock function with given fields: ctx, loanSummary
func (_m *DisbursementMySQLRepositoryInterface) CreateLoanSummary(ctx context.Context, loanSummary *models.LoanSummary) error {
	ret := _m.Called(ctx, loanSummary)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoanSummary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.LoanSummary) error); ok {
		r0 = rf(ctx, loanSummary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePaymentSchedules provides a mock function with given fields: ctx, paymentSchedules
func (_m *DisbursementMySQLRepositoryInterface) CreatePaymentSchedules(ctx context.Context, paymentSchedules []*models.PaymentSchedule) error {
	ret := _m.Called(ctx, paymentSchedules)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentSchedules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.PaymentSchedule) error); ok {
		r0 = rf(ctx, paymentSchedules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDisbursementByLoanID provides a mock function with given fields: ctx, loanID
func (_m *DisbursementMySQLRepositoryInterface) GetDisbursementByLoanID(ctx context.Context, loanID string) (*models.DisbursementDetail, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetDisbursementByLoanID")
	}

	var r0 *models.DisbursementDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.DisbursementDetail, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.DisbursementDetail); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DisbursementDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanSummaryByLoanID provides a mock function with given fields: ctx, loanID
func (_m *DisbursementMySQLRepositoryInterface) GetLoanSummaryByLoanID(ctx context.Context, loanID string) (*models.LoanSummary, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanSummaryByLoanID")
	}

	var r0 *models.LoanSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.LoanSummary, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.LoanSummary); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoanSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDisbursementMySQLRepositoryInterface creates a new instance of DisbursementMySQLRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisbursementMySQLRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisbursementMySQLRepositoryInterface {
	mock := &DisbursementMySQLRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
