// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "billing-engine/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RepaymentMySQLRepositoryInterface is an autogenerated mock type for the RepaymentMySQLRepositoryInterface type
type RepaymentMySQLRepositoryInterface struct {
	mock.Mock
}

// CreatePaymentHistory provides a mock function with given fields: ctx, histories
func (_m *RepaymentMySQLRepositoryInterface) CreatePaymentHistory(ctx context.Context, histories []*models.PaymentScheduleHistory) error {
	ret := _m.Called(ctx, histories)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.PaymentScheduleHistory) error); ok {
		r0 = rf(ctx, histories)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoanSummaryByLoanID provides a mock function with given fields: ctx, loanID
func (_m *RepaymentMySQLRepositoryInterface) GetLoanSummaryByLoanID(ctx context.Context, loanID string) (*models.LoanSummary, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanSummaryByLoanID")
	}

	var r0 *models.LoanSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.LoanSummary, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.LoanSummary); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoanSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextDueDate provides a mock function with given fields: ctx, loanID
func (_m *RepaymentMySQLRepositoryInterface) GetNextDueDate(ctx context.Context, loanID string) (*time.Time, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetNextDueDate")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*time.Time, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *time.Time); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverduePaymentSchedulesByLoanID provides a mock function with given fields: ctx, loanID
func (_m *RepaymentMySQLRepositoryInterface) GetOverduePaymentSchedulesByLoanID(ctx context.Context, loanID string) ([]*models.PaymentSchedule, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetOverduePaymentSchedulesByLoanID")
	}

	var r0 []*models.PaymentSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.PaymentSchedule, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.PaymentSchedule); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PaymentSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingPaymentSchedulesByLoanID provides a mock function with given fields: ctx, loanID
func (_m *RepaymentMySQLRepositoryInterface) GetPendingPaymentSchedulesByLoanID(ctx context.Context, loanID string) ([]*models.PaymentSchedule, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingPaymentSchedulesByLoanID")
	}

	var r0 []*models.PaymentSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.PaymentSchedule, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.PaymentSchedule); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PaymentSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoanSummary provides a mock function with given fields: ctx, loanSummary
func (_m *RepaymentMySQLRepositoryInterface) UpdateLoanSummary(ctx context.Context, loanSummary *models.LoanSummary) error {
	ret := _m.Called(ctx, loanSummary)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanSummary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.LoanSummary) error); ok {
		r0 = rf(ctx, loanSummary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentSchedules provides a mock function with given fields: ctx, schedules
func (_m *RepaymentMySQLRepositoryInterface) UpdatePaymentSchedules(ctx context.Context, schedules []*models.PaymentSchedule) error {
	ret := _m.Called(ctx, schedules)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentSchedules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.PaymentSchedule) error); ok {
		r0 = rf(ctx, schedules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepaymentMySQLRepositoryInterface creates a new instance of RepaymentMySQLRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepaymentMySQLRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepaymentMySQLRepositoryInterface {
	mock := &RepaymentMySQLRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
